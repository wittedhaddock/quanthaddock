# Put any initialization logic here.  The context object will be passed to
# the other methods in your algorithm.
from __future__ import division
import numpy
import pandas
from sklearn.neighbors import KNeighborsClassifier

def initialize(context):
    context.highs = []
    context.lows = []
    context.closes = []
    context.prices = []
    pass
   # print fscv
                    
   # print context

# Will be called on every trade event for the securities you specify. 
def handle_data(context, data):
    
    
    # Implement your algorithm logic here.

    # data[sid(X)] holds the trade event data for that security.
    # context.portfolio holds the current portfolio state.

    CROSS_VALIDATION_AMOUNT = 0.2
    # Place orders with the order(SID, amount) method.
    
    explanatory_variables = context.fundamental_df.values
    data_point = data[symbol('AAPL')]
    context.highs.append(data_point.high)
    context.lows.append(data_point.low)
    context.closes.append(data_point.close_price)
    context.prices.append(data_point.price)
    
    
    d = {"highs":context.highs, "lows":context.lows, "closes":context.closes, "prices":context.prices}
    df = pandas.DataFrame(data=d)

    d = {"highs":context.highs, "lows":context.lows, "closes":context.closes }
    explanatory_series = pandas.DataFrame(data=d, index = df.index)
    
    d = {"prices":context.prices}
    response_series = pandas.DataFrame(data=d, index = df.index)
    
    holdout_amount = round(len(response_series.index) * CROSS_VALIDATION_AMOUNT, 0)
    print holdout_amount
    
    print df
    print explanatory_series
    print response_series
    
    if holdout_amount > 2 and len(df.index) > 1/CROSS_VALIDATION_AMOUNT:
        test_indices = df.index[df.index.isin(numpy.random.choice(df.index, holdout_amount, replace = False))]
        train_indices = df.index[~df.index.isin(test_indices)]
        
        print test_indices
        print train_indices
        
        print response_series.ix
        print explanatory_series.ix
        
        response_train = response_series.ix[train_indices,]
        explanatory_train = explanatory_series.ix[train_indices,]

        response_test = response_series.ix[test_indices,]
        explanatory_test = explanatory_series.ix[test_indices,]
    
    # TODO: implement your own logic here.
    order(sid(24), 50)
    
def before_trading_start(context): 
    fundamental_df = get_fundamentals(
        # Retrieve data based on PE ratio and economic sector
        query(
            fundamentals.valuation_ratios.pe_ratio,
            fundamentals.earnings_report.basic_eps,
            fundamentals.asset_classification.morningstar_sector_code
        )

        # Filter where the Sector code matches our technology sector code
        .filter(fundamentals.asset_classification.morningstar_sector_code == 311)


        # Order by highest PE ratio and limit to 4 results 
        .order_by(fundamentals.valuation_ratios.pe_ratio.desc())
    )
    context.fundamental_df = fundamental_df
    
    
    
    